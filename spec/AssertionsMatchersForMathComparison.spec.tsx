//! Мэтчеры для математического сравнения:
//! toBeGreaterThan() - значение в левой части больше чем значение в правой части возвращает true
//! toBeGreaterThanOrEqual() - значение в левой части больше чем или равно значение в правой части возвращает true
//! toBeLessThan() - значение в левой части меньше чем значение в правой части возвращает true
//! toBeLessThanOrEqual() - значение в левой части меньше чем или равно значение в правой части возвращает true
//! toBeCloseTo() - сравнение чисел с точностью до определенного количества знаков после запятой

it('Математические сравнения значений', () => {
  // expect(1 + 2).toBeGreaterThan(2) // toBeGreaterThan (больше чем) - значение в левой части (1 + 2) больше значения в правой части (2), поэтому true и проходит тест

  // expect(1 + 2).toBeGreaterThanOrEqual(3) // toBeGreaterThanOrEqual (больше чем или равно) - значение в левой части (1 + 2) равно значению в правой части (3), поэтому true и проходит тест

  // expect(1 + 2).toBeLessThan(4) // toBeLessThan (меньше чем) - значение в левой части (1 + 2) меньше значения в правой части (4), поэтому true и проходит тест

  // expect(1 + 2).toBeLessThanOrEqual(3) // toBeLessThanOrEqual (меньше чем или равно) - значение в левой части (1 + 2) равно значению в правой части (3), поэтому true и проходит тест

  // expect(0.1 + 0.2).toBe(0.3) // тест не пройдет из-за особенности JS (0.1 + 0.2 = 0.30000000000000004) а не 0.3, что бы избежать такого используй мэтчер toBeCloseTo - этот мэтчер под капотом использует округление, принимает 2 аргумента: ожидаемое значение и точность округления:

  expect(0.1 + 0.2).toBeCloseTo(0.3, 5) // точность округления = 5 знаком после запятой 0.30000. Тест пройдет (0.1 + 0.2 = 0.300000)

  // expect(0.1 + 0.2).toBeCloseTo(0.3, 20) // точность округления = 20 знакам после запятой 0.30000000000000004000. Тест не пройдет (0.1 + 0.2 = 0.30000000000000004000)
})

// npm run test -- AssertionsMatchersForMathComparison.spec.tsx --watch
