//! Мэтчеры для работы с функциями:

it('Работа с функциями', () => {
  const fn = jest.fn((arg) => arg) // создаем мок-функцию. Мок-функции используются для отслеживания вызовов функций и их аргументов без выполнения реальной логики функции.
  const arg1 = 'Greetings!'
  const arg2 = { value: 1 }

  fn(arg1) // вызываем мок-функцию

  // expect(fn).toHaveBeenCalled() // проверка запуска вызова функции, проверяем, что мок-функция fn была вызвана хотя бы один раз.

  // expect(fn).toHaveBeenCalledTimes(1) // ожидаем, что мок-функция fn будет вызвана ровно один раз

  // expect(fn).toHaveBeenCalledWith(arg1) // ожидаем, что мок-функция fn будет вызвана с аргументом arg1 = 'Greetings!'

  fn(arg2) // вызываем мок-функцию c аргументом arg2 = { value: 1 }

  // expect(fn).toHaveBeenCalledWith({ value: 1, label: undefined }) // тест пройдет, так как toHaveBeenCalledWith сравнивает объекты не по ссылке а по содержимому, не учитывая поля значения которых undefined

  // expect(fn).toHaveBeenLastCalledWith(arg2) // тест пройдет, так как ожидаем, что мок-функция fn последний раз была вызвана с аргументом arg2 = { value: 1 }

  // expect(fn).toHaveReturned() // тест пройдет, проверяем что функция завершилась. toHaveReturned - важный мэтчер, что бы проверять этапа завершения

  // expect(fn).toHaveReturnedTimes(2) // тест пройдет, проверяем сколько раз функция завершилась, полезно когда функция вызывается в цикле. Функция запустилась 2 раза и 2 раза завершилась.

  // expect(fn).toHaveReturnedWith() // мэтчер проверяющий результат, с каким результатом вернулась функция, в скобках можем написать undefined так как мок-функция ничего не возвращает или по умолчанию можем ничего не писать toHaveReturnedWith(), но если мок-функция возвращает arg: const fn = jest.fn(arg => arg) то нужно его указывать иначе тест не пройдет, см следующий пример:

  // expect(fn).toHaveReturnedWith(arg1) // тест пройдет, это означает, что мок-функция fn не только была вызвана, но и вернула конкретное значение arg1 при одном из своих вызовов.

  // expect(fn).toHaveLastReturnedWith(arg2) // тест пройдет, так как послдений раз функцию вызывали с аргументом arg2 = { value: 1 }

  // expect(fn).toHaveBeenNthCalledWith(2, arg2) // тест пройдет, так как мок-функция fn была вызвана во второй раз с определенным аргументом arg2. Это утверждение позволяет быть уверенным, что функция вызывалась с правильными аргументами и в правильном порядке.

  expect(fn).toHaveNthReturnedWith(2, arg2) // тест пройдет, так как при втором вызове мок-функции fn было возвращено значение arg2. Это утверждение позволяет тебе проверить не только порядок вызовов функции, но и конкретные значения, которые функция возвращает при каждом вызове.
})

// npm run test -- AssertionsMatchersForWorkingWithFunctions.spec.tsx --watch
